# Sources
http://fr.openclassrooms.com/informatique/cours/gerez-vos-codes-source-avec-git
http://www.vogella.com/tutorials/Git/article.html


# Cloner un projet = le ramener chez soi
git clone https://github.com/pylapp/academical_Enssat_EvilChild7.git


# Acéder au status du repository
git status


# Modifier le texte d'un commit
git commit --amend


# Ajouter le tag SOURCES_INIT au commit n°6eec66cdfb21a82907915499f6198f19aba136d4 (cf git log)
git tag SOURCES_INIT 6eec66cdfb21a82907915499f6198f19aba136d4
# Ou alors
git tag -a vA.B.C -m "Message kidéchir"


# Envoyer les tags au repo (tag = release)
git push --tags


# Installation de Git pour Archlinux
sudo pacman -S git


# Initialiser git sur le dossier courant
git init


# Ajouter tous les fichiers et dossiers pour le repo
git add .


# Sauvegarder le changement pour le repo
git commit -m "Initial commit" 


# Envoyer toutes les modifications au repo
git push


# Récupérer les éléments depuis les dépôts
git pull;


# Voir les branches
git branch


# Changer de branche et aller vers la branche "py"
git checkout py


# Récupérer les modifications de "brancheAvecModifsAchoper"
# et fusionner le tout dans la branche courante
git merge brancheAvecModifsAchoper


# Faire un diff
git diff


# Les logs
git log
git log -p




# Et biens d'autres commandes encore dont :

# Gérer la configuration de git globalement
git config --global user.name "XXX"
git config --global user.email "XXX@truc.com"

# D'autres éléments de configuration comme la coloration syntaxique...
git config --global push.default simple
git config --global branch.autosetuprebase always 
git config --global color.ui true
git config --global color.status auto
git config --global color.branch auto 

# ... Ou l'éditeur par défaut
git config --global core.editor vim 

# La config choisie
git config --list

# Appliquer la config
git config --global core.excludesfile ~/.gitignore 
git config --list

# Créer une branche "py"
git branch py


